# -*- coding: utf-8 -*-
"""Copy of week2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IrtPVI_zJigx3hsti3iDVT_Gi8ftRs3K

# Week 2 Study Notebook

# UC San Diego OMDS DSC 207

### Installing Otter-Grader

In this course, we will be using Otter-Grader to evaluate your code using predefined test cases. Otter-Grader is a powerful tool that helps you check your work before submitting assignments. To get started with Otter-Grader, you need to install it in your environment.

To install Otter-Grader, simply run the below code cell. In case, an error occurs related to wget command, please refer to the below link: https://www.jcchouinard.com/wget/. The tool may not be installed in your system.
"""

# Commented out IPython magic to ensure Python compatibility.
# DO NOT MODIFY
# %pip install otter-grader

tests = "https://github.com/dsc207rfall2023/fa23course-dsc207r/raw/main/assignments/Week%202/tests.zip"
!wget $tests && unzip -o tests.zip

# Initialize Otter
import otter
grader = otter.Notebook()

# LOAD LIBRARIES
import numpy as np

"""### 1. Random array

Generate an integer random numpy array, `a`, of shape (3,5) with elements from 5 to 26 (inclusive). (Hint: Look at the documentation of `numpy.random.randint`) [1 pt]

For eg.

    a = array([[26,  9, 24,  7, 15],
              [17, 15, 21, 18, 24],
              [ 5, 15, 10, 15, 13]])
"""

start = 5
end = 26
# note range is inclusive for upper bound unlike python range function
a = np.random.random_integers(start, end, size=(3,5))

# Sanity checks
assert a.shape == (3, 5)
assert np.max(a) <= 26

grader.check('q1')

"""### 2. Transpose and inverse of the array

1. The transpose of an array is created by using the first row of the array as the first column of the new array, the second row of the array as the second column of the new array, and so on. **Create transpose of array `a` using numpy.** Note - you should not write your own transpose function for this step. [0.5 pt]

For eg. The transpose of

    a = array([[26,  9, 24,  7, 15],
              [17, 15, 21, 18, 24],
              [ 5, 15, 10, 15, 13]])

    aT = array([[26, 17,  5],
                [ 9, 15, 15],
                [24, 21, 10],
                [ 7, 18, 15],
               [15, 24, 13]])

2. Like numbers, matrices do have reciprocals. In case of matrices, this reciprocal is called inverse matrix. If A is a square matrix and B is its inverse, then the product of two matrices is equal to the unit matrix. **Create the inverse of B using numpy.** (Hint: look up documentation for linalg library in numpy) [0.5 pt]

Initialize an integer numpy array `B`, of shape (2,2) as shown below.
      
      B=array([[10,  6],
              [ 5,  5]])
       
"""

# This is the array 'a' referred to in later problems
# Do not modify!
a = np.array([[17, 20, 13, 23, 26],
              [21, 12,  9, 15,  6],
              [16, 23, 14, 25, 20]])


aT = a.T
B = np.array([[10, 6], [5, 5]])
B_inv = np.linalg.inv(B)

# Sanity checks
assert aT.shape == (5, 3)
assert np.min(aT) >= 5
assert np.linalg.det(B_inv) != 0

grader.check('q2')

"""### 3. Array slicing
1. Slicing in python means taking elements from one given index to another given index. **Retrieve elements from last 2 rows and last 2 columns of array `a` and store the result in `c`** [0.5 pt]

For eg. for the above array A - the last 2 columns and last 2 rows are

    array([[18, 24],
            [15, 13]])

2. Retrieve the 2nd and 3rd rows of array `a` and store the result in `d`.  [0.5 pt]

For eg. for the above array A, the 2nd and 3rd rows are

      array([[17, 15, 21, 18, 24],
            [ 5, 15, 10, 15, 13]])
"""

print(a)
# for a 3 row by 5 column we want to select the last two rows and last two columns
c = a[1:,3:]
# for a 3 row by 5 column we want to select the last two rows and all columns
d = a[1:3,:]
print(c)
print(d)

# Checks
assert c.shape == (2, 2)
assert d.shape == (2, 5)

grader.check('q3')

"""### 4. Broadcasting

1. Broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Below you can see the difference between vector addition for traditional lists and numpy arrays.



"""

# If we were not using numpy arrays, we would have to loop through the array. Run this cell.
arr= [[27, 11, 27, 11, 20],
       [18, 17, 24, 22, 29],
       [ 6, 17, 13, 19, 18]]
c = [1,2,3,4,5]
for row in range(len(arr)):
  for col in range(len(arr[0])):
    arr[row][col] = arr[row][col]+c[col]
arr

"""
**Create a vector `c=[1,2,3,4,5]`. Add this vector to array `a` using numpy broadcasting. Store the result in `x`.**  [0.5 pt]

For eg. for the array A - the result array would be

    array([[27, 11, 27, 11, 20],
          [18, 17, 24, 22, 29],
          [ 6, 17, 13, 19, 18]])

2. **(True / False) It is possible to add array B from Question 2 to a. Explain your reasons for the answer.**  [0.5 pt]"""

print(a)
c = np.array([1,2,3,4,5])
x = a + c


answer = False #True or False
'''
It is not possible becuasse the trailing dimensions of the arrays must be equal
b.shape = (2,2)
a.shape = (3,5)
2 =! 5
'''

# Checks
assert x.shape == (3, 5)

assert np.array_equal(x, a) == False

grader.check('q4')

"""### 5. Reshaping

**Create a list `B=[1,2,3]` and add it to all the columns of `a`. Store the resulting array in z** (Hint: Use reshape and broadcasting)  [1 pt]

For eg. for the modified array A, the result would be

    array([[27, 10, 25,  8, 16],
          [19, 17, 23, 20, 26],
          [ 8, 18, 13, 18, 16]])
"""

B = np.array([1,2,3])
z = (a.T + B).T
print(z)

assert z.shape == (3, 5)

assert np.array_equal(z, a) == False

grader.check('q5')

"""### 6. Data analysis using numpy

**Normalization: Create a new array where each element in `a` is adjusted by subtracting the mean of its corresponding row. Store this new array in a_norm.** (Hint: look at numpy's mean method and it's arguments) [2 pt]

For eg. for the modified array A, the expected output would be

    array([[ 9.8, -7.2,  7.8, -9.2, -1.2],
          [-2. , -4. ,  2. , -1. ,  5. ],
          [-6.6,  3.4, -1.6,  3.4,  1.4]])
"""

#axis =1 since we are intrested in mean for each row
a_norm = a - a.mean(axis=1, keepdims=True)
print(a_norm)

assert a_norm.shape == (3, 5)

grader.check('q6')

"""### 7. Data manipulation in numpy arrays.

**Swap first and second row of array `a`. Store the new array in X.** [0.5 pt]

For eg. for the modified array `a` the expected output would be

    array([[17, 15, 21, 18, 24],
           [26,  9, 24,  7, 15],
           [ 5, 15, 10, 15, 13]])

**Swap second and third row of array `X`. Store the new array in `Y`.**  [0.5 pt]

For eg. for the modified array `a` the expected output would be
   
    array([[17, 15, 21, 18, 24],
           [ 5, 15, 10, 15, 13],
           [26,  9, 24,  7, 15]])
"""

# create a copy of a then swap first wuth second row
X = a.copy()
X[[0,1],:] = a[[1,0],:]

# create a copy of X then swap second and third row
Y = X.copy()
Y[[1,2],:] = X[[2,1],:]

assert X.shape == (3, 5)

assert Y.shape == (3, 5)

grader.check('q7')

"""### 8. The Power Of Numpy"""

#Run this cell
import time

twoD_list = [[i for i in range(500)] for j in range(500)]

# This a traditional matrix multiplication using for loops
def matrix_multiplication(x, y):
    dp = 0
    prod=[]
    for i in range(len(x)):
      row=[]
      for j in range(len(x[0])):
        mul=0
        for k in range(len(x[0])):
          mul += (x[i][k]*y[k][j])
        row.append(mul)
      prod.append(row)

    return prod

# Run this cell. Note the time taken to perform traditional matrix multiplication using lists.
start_time = time.time()
dot_product_list = matrix_multiplication(twoD_list, twoD_list)
end_time = time.time()
print(end_time-start_time)

"""**Convert the `twoD_list` to a numpy array `numpy_twoD_array`. Print the numpy array**

For eg.

    numpy_twoD = array([[  0,   1,   2, ..., 497, 498, 499],
                        [  0,   1,   2, ..., 497, 498, 499],
                        [  0,   1,   2, ..., 497, 498, 499],
                         ...,
                        [  0,   1,   2, ..., 497, 498, 499],
                        [  0,   1,   2, ..., 497, 498, 499],
                        [  0,   1,   2, ..., 497, 498, 499]])

**Perform matrix multiplication of the numpy array i.e. numpy_twoD_array * numpy_twoD_array. Record the result in dot_product_array and report the time taken for the operation similar to traditional list multiplication.**  [2 pt]
"""

start_time=time.time()
numpy_twoD_array = np.array(twoD_list)
dot_product_array = np.matmul(numpy_twoD_array, numpy_twoD_array)
end_time=time.time()

'''
trad matrix multiplication time : ~26s
numpy matrix multiplication time : ~0.3s
'''

assert dot_product_array.shape == (500, 500)

grader.check('q8')

"""### 9. Password Encoding Challenge

#### Part A: 2.5 pts

You are a cybersecurity expert tasked with encoding a password protected system. Your mission is to write a Python script using NumPy to generate the password. Follow these steps:

1. Set the random seed using the last 3 digits of your phone number, or any three numbers of your choice. Since random number generators aren't truly random, we use a seed to initialize the pseudorandom number generator.
Some more information about the random number generator seeds: https://stackoverflow.com/questions/21494489/what-does-numpy-random-seed0-do
2. Generate a list of 12 random integers between 1 and 1000 using NumPy.
3. Reshape this list into a shape (nxm) of your choice (other then what it already is) (n !=1, m!=1).
4. Perform three operations of your choice using NumPy functions on this reshaped (nxm) array. Some examples are:
  - np.add() [Adds 2 arrays (you can generate another array randomly and add)]
  - np.matmul() [Carries out matrix multiplication of 2 matrices]
  - np.sin() [Returns the sine of each element of nxm matrix]
  - np.transpose() [Returns the transpose of the input matrix]
5. Your final output should be a 1D array of 12 integers, which will serve as the password. (You can check the shape using the numpy.shape function. Both (12,1) and (12,) are acceptable.)

Requirements:
- Use NumPy for all operations.
- Comment your code to explain your thought process.
- The final password must be different from the initial random list.

Rubric for Code Submission
1. Correctly setting the seed. (0.25 pt)
2. Successful generation of 12 random numbers between 0 and 1000 using numpy. (0.5 pt)
3. Reshaping of the 1D array to an (nxm) array. (0.5 pt)
4. Utilizing 3 distinct numpy operations to modify the generated array and obtain a password. (0.5 pt)
5. Successfully reshaping the nxm modified array back to a 1D array of 12 **integers**. (0.5 pt)
6. Code runs without any errors (0.25 pt)
"""



"""#### Part B: 2.5 pts

Submit a 2-3 minute video explaining your approach and demonstrating your understanding of the NumPy concepts used.

Rubric for Video Submission:
1. Demonstration of understanding NumPy random number generation (0.5 pt)
2. Explanation of reshaping logic(Explain how reshaping works and why your new shape is correct) (1 pt)
3. Discussion of chosen NumPy operations and their effects (1 pt)

Upload the recorded video to your drive and paste the shareable link in the cell below.

Note: Ensure that we are able to view the video.
"""

#PASTE THE LINK HERE INSTEAD OF THIS TEXT

"""### Submission

Before you submit your notebook, ensure that you've run all the cells sequentially to display images, graphs, and outputs correctly (if the outputs are missing we might not be able to award points for those parts). Take the time to review your solutions and evaluate using the public test cases. Once you're satisfied, save your notebook by navigating to "File" in the Colab Notebook menu and selecting "Save" or using the keyboard shortcut (usually Ctrl + S or Cmd + S).

To submit, export your notebook as an .ipynb file. Ensure it's saved with the same name as the assignment. Then, upload this .ipynb file to Gradescope. Remember to submit the correct version.

Please save your work before exporting it, and if you encounter any technical issues or have questions about the submission process, reach out to the course staff for assistance

---

To double-check your work for the autograded portions, the cell below will rerun all of the autograder tests.
"""

grader.check_all()