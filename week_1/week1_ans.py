# -*- coding: utf-8 -*-
"""week1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P-70qTHxmqze7zOfYyY56g1sGrAWLeHV

# Week 1 Study Notebook

# UC San Diego OMDS DSC 207

## Check your Python skills while using Colab notebooks.

### Installing Otter-Grader

Otter-Grader is a powerful tool that helps you check your work before submitting assignments. To get started with Otter-Grader, you need to install it within this Colab notebook.

To install Otter-Grader, simply run the below code cell.

Note that questions 1-3 and 5-9 are autograded, while questions 4 and 10 will be graded manually.
"""

# Commented out IPython magic to ensure Python compatibility.
# DO NOT MODIFY
# %pip install otter-grader

files = "https://github.com/dsc207rfall2023/fa23course-dsc207r/raw/main/assignments/Week%201/tests.zip"
!wget $files && unzip -o tests.zip

# Initialize Otter
import otter
grader = otter.Notebook()

"""### Loading Python modules"""

import pandas as pd
import numpy as np

# ADD ADDITIONAL PYTHON MODULES BELOW
from math import sqrt

"""### 1.  Write a program to swap a string and an int variable and print their data types to verify the swapping operation

* Initialize 2 variables my_int = 5 , and my_str = "Hi"
* Swap these variables such that my_int now holds the value of my_str and vice versa
* Verify this by printing their data types

_Points:_ 5
"""

# Initialize my_int and my_str
my_int = 5
my_str = "Hi"

# swap values for variables my_int and my_str
my_int, my_str = my_str, my_int

# print data type for my_int
print(type(my_int))

# print data type for my_str
print(type(my_str))

grader.check("q1")

"""### 2. Write a Python Program to Calculate the length of the diagonal of a rectangle

* Initialize the 2 sides of the rectangle a and b to 5 and 6
* Calculate the length of the diagonal using the formula - diagonal = âˆš(a^2 + b^2)

_Points:_ 5
"""

# Initialize variables a and b
a = 5
b = 6

def calc_diag(a, b):
    diag = sqrt(a**2+b**2)
    return(diag)

grader.check("q2")

"""### 3. Write a Python Program to Check if a Number is divisible by 3

* Initialize a variable that takes input from user
* Check and return True or False if the number is divisible by 3
* If the input is not an int, return False

_Points:_ 10
"""

#Initialize a variable that takes input from user
user_input = input('Please enter a number to see if it is divisible by 3: ')

def is_divisible_by_3(num):
    if type(num) == int:
        if num %3 == 0:
            return(True)
        else:
            return(False)
    else:
        return(False)

grader.check("q3")

"""<!-- BEGIN QUESTION -->

### 4. Write a Python Program to Check if a number has exactly 3 digits (no zeros allowed at the beginning and the number can be assumed to be positive)

* Initialize a variable that takes input from user(input will be given as a string)
* Check and print true if the number has exactly 3 digits(no zeros allowed at the beginning) else print false

_Points:_ 10
"""

'''
Since no zeros are allowed at the beginning I will assume floats are not
included int the test.

Also since there is no test included for this question I will loop through a
list that tests several cases for the num_is_three_digits function.
test_1: positive 3 digit int
test_2: negative 3 digit int
test_3: leading/trailiing whitespace
test_4: number starting with 0
test_5: number with less than 3 digits
test_6: number with greater than 3 digits
test_7: string
'''
num = input('Please enter an integer: ')

tests = ['100','-100',' 100 ','010','1','1000','my_str']

def num_is_three_digits(num):
  # Remove leading or trailing white space
  num = num.strip()
  try:
    # Check if user's number is an int
    if type(int(num)) == int:
      # Remove negative sign
      digits = [digit for digit in list(num) if digit != '-']
      # Check length of user's number
      if len(digits) == 3:
        # Check if number starts with zero
        if digits[0] == '0':
          print('number cannot start with 0')
          return(False)
        else:
          print('number has 3 digits')
          return(True)
      else:
        print(f'number has {len(digits)}')
        return(False)
  except:
    print("not an int please enter int")
    return(False)

result = num_is_three_digits(num)
print(result,'\n')

# Test cases stated above in inital comments
print(80*'=')
print('Test cases below')
print(80*'=')
for test in tests:
  print(f'Testing: {test}')
  result = num_is_three_digits(test)
  print(result)
  print()

"""<!-- END QUESTION -->

### 5. Write a Python Program to Check Whether a String is Palindrome or Not

* Initialize a string
* Lower case it to allow easy comparison
* Check using if-else statements if the string is a palindrome
* A palindrome is a string which is same read forward or backwards.

_Points:_ 10
"""

# Initialize a string
my_str = 'kayak'
my_str = my_str.lower()

def if_palindrome(x):
  if x == x[::-1]:
    return(True)
  else:
    return(False)

grader.check("q5")

"""### 6.  **Print numbers divisible by 5 between 4 and 30, inclusive**

* Iterate through the numbers in the for loop and notice the way range has been used to generate numbers in the for loop
* Produce a list and print containing only the numbers divisible by 5 using if statement

_Points:_ 5
"""

start = 4
end = 30

# must add one to the upper bound since the range function is not inclusive
sol = [i for i in range(start,end+1) if i%5 == 0]

grader.check("q6")

"""### 7. Write a Python Program to print the first n numbers of the Fibonacci series starting from 0

* Use a loop and return a list of first n numbers of the Fibonacci series: 0,1,1,2,3,....


_Points:_ 15
"""

def fibonacci(n):
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
      fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    return(fib_sequence[0:n])

grader.check("q7")

"""### 8. Write a Python Program that defines a function to Remove Vowels From a String

* You can initialize a string of your choice
* Define the function
* Use a for loop to return an updated string with the vowels removed.

_Points:_ 10
"""

def remove_vowels(input_str):
  vowels = list("AEIOUaeiou")
  input_str = [i for i in input_str if i not in vowels]
  input_str = "".join(input_str)
  return(input_str)

grader.check("q8")

"""### 9. Write a program to define a function that takes two numbers as arguments and returns the sum of all numbers between the arguments passed (exclusive, i.e. excluding the limits).

* You can define a range of your choice
* Define the function
* Use a for loop to add numbers within the range(exclusive)

_Points:_ 10
"""

def sum(a, b):
    range_of_numbers_exclusive = [i for i in range(a+1,b)]
    sum_of_range = 0
    for i in range_of_numbers_exclusive:
      sum_of_range += i
    return(sum_of_range)

grader.check("q9")

"""<!-- BEGIN QUESTION -->

### 10. Define your own Python function!

#### Part A
In Python, functions are blocks of code that only run when they are called. Functions are programmed to complete a specific task. You can input data, called parameters, into functions. Functions can also return data as a result.

Write a function with the following components:

* Pass a list as the function parameter. The list can be composed of any data type (int, string, float, etc.)
* At least one conditional (if/else/elif)
* One loop (ex. for, while, do-while)
* Returns one or more values. This value can be a list or a single element.


Ensure the following:
* Your program contains all the components listed above.
* You test the function by calling it outside of the function.
* Your program runs without any errors.

_Points:_ 10
"""

def remove_strings(my_list):
  new_list=[]
  for item in my_list:
    if type(item) != str:
      new_list.append(item)
    else:
      print(f"do not append this item: {item}")
  return(new_list)

test_list = ['a',True,1,2.34,'my_str']
removed_strings_list = remove_strings(test_list)
print(removed_strings_list)

"""#### Part B
Record a video, no more than 3 minutes long.

* Explain the function at a high level. We want you to explain the flow of code, including the order in which the lines of code are executed.
* Explain at least two of the required components. For example, you could describe your conditional statement and what your loop does.

You can reference the example video here: https://drive.google.com/file/d/1LragCuaHO_eVMm1EDfFv7wqQcrC86NuW/view?usp=sharing

Upload the recorded video to your drive and paste the shareable link in the cell below.

Note: Ensure that we are able to view the video.

_Points:_ 10
"""

#https://drive.google.com/file/d/1NoM7Vm1Fv7DvJ65aMJp6WI-5aeHTIxxq/view?usp=drive_link

"""<!-- END QUESTION -->

### Submission

Before you submit your notebook, ensure that you've run all the cells sequentially to display images, graphs, and outputs correctly (if the outputs are missing we might not be able to award points for those parts). Take the time to review your solutions and evaluate using the public test cases. Once you're satisfied, save your notebook by navigating to "File" in the Colab Notebook menu and selecting "Save" or using the keyboard shortcut (usually Ctrl + S or Cmd + S).

To submit, export your notebook as an .ipynb file. Ensure it's saved with the same name as the assignment. Then, upload this .ipynb file to Gradescope. Remember to submit the correct version.

Please save your work before exporting it, and if you encounter any technical issues or have questions about the submission process, reach out to the course staff for assistance.

---

To double-check your work for questions 1-3 and 5-9, the cell below will rerun all of the autograder tests.
"""

grader.check_all()